import 'dart:ui';

import 'package:flutter/material.dart';

const primary=Color(0xFF232323);
const grey=Color(0xFF909198);
const whiteClr = Colors.white;

// assets path
const logo="assets/logo.png";


//route names

const splash="/splash";


// Icons

const chatsIcon="assets/chat icon.png";
const profileIcon="assets/profilee.png";
const callIcon="assets/callIcon.png";
const searchIcon="assets/searchicon.webp";

// Auth

const signup="/signup";
const login="/login";


const wrapper="/wrapper";
const chatRoom="/chatRoom";


import 'package:flutter/cupertino.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

final h=TextStyle(fontSize: 22.sp,fontWeight: FontWeight.bold);
final body=TextStyle(fontSize: 14.sp);
final small=TextStyle(fontSize: 12.sp);

enum ViewState{ idle, loading }

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

extension ContextExtension on BuildContext {
  showSnackbar(String text) =>
      ScaffoldMessenger.of(this).showSnackBar(SnackBar(content: Text(text)));
}


import 'dart:convert';

class MessageModel {
  final String? id;
  final String? content;
  final String? senderId;
  final String? receiverId;
  final DateTime? timeStamp;

  MessageModel({
    this.id,
    this.content,
    this.senderId,
    this.receiverId,
    this.timeStamp,
  });



  Map<String, dynamic> toMap() {
    return <String, dynamic>{
      'id': id,
      'content': content,
      'senderId': senderId,
      'receiverId': receiverId,
      'timeStamp': timeStamp?.millisecondsSinceEpoch,
    };
  }

  factory MessageModel.fromMap(Map<String, dynamic> map) {
    return MessageModel(
      id: map['id'] != null ? map['id'] as String : null,
      content: map['content'] != null ? map['content'] as String : null,
      senderId: map['senderId'] != null ? map['senderId'] as String : null,
      receiverId: map['receiverId'] != null ? map['receiverId'] as String : null,
      timeStamp: map['timeStamp'] != null ? DateTime.fromMillisecondsSinceEpoch(map['timeStamp'] as int) : null,
    );
  }

  String toJson() => json.encode(toMap());

  factory MessageModel.fromJson(String source) => MessageModel.fromMap(json.decode(source) as Map<String, dynamic>);
}


// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'dart:convert';

class UserModel {
  final String? uid;
  final String? name;
  final String? email;
  final String? imageUrl;
  final Map<String,dynamic>? lastMessage;
  final int? unreadCounter;


  UserModel({
    this.uid,
    this.name,
    this.email,
    this.imageUrl,
    this.lastMessage
    ,this.unreadCounter
  });
  

  Map<String, dynamic> toMap() {
    return <String, dynamic>{
      'uid': uid,
      'name': name,
      'email': email,
      'imageUrl': imageUrl,
      'lastMessage': lastMessage,
      'unreadCounter': unreadCounter,
    };
  }

  factory UserModel.fromMap(Map<String, dynamic> map) {
    return UserModel(
      uid: map['uid'] != null ? map['uid'] as String : null,
      name: map['name'] != null ? map['name'] as String : null,
      email: map['email'] != null ? map['email'] as String : null,
      imageUrl: map['imageUrl'] != null ? map['imageUrl'] as String : null,
      lastMessage: map['lastMessage'] != null ? Map<String,dynamic>.from((map['lastMessage'] as Map<String,dynamic>)) : null,
      unreadCounter: map['unreadCounter'] != null ? map['unreadCounter'] as int : null,
    );
  }

  String toJson() => json.encode(toMap());

  factory UserModel.fromJson(String source) => UserModel.fromMap(json.decode(source) as Map<String, dynamic>);

  @override
  String toString() {
    return 'UserModel(uid: $uid, name: $name, email: $email, imageUrl: $imageUrl, lastMessage: $lastMessage, unreadCounter: $unreadCounter)';
  }
}


import 'package:chat/core/enums/enums.dart';
import 'package:flutter/material.dart';

class BaseViewmodel extends ChangeNotifier {
  ViewState _state=ViewState.idle;

  ViewState get state =>_state;

  setstate(ViewState state){
    _state=state;
    notifyListeners();
  }
}

import 'dart:developer';

import 'package:firebase_auth/firebase_auth.dart';

class AuthServices {
  final _auth = FirebaseAuth.instance;

  Future<User?> signup(String email, String password) async {
   
    try {
       final authCredential = await _auth.createUserWithEmailAndPassword(
      email: email,
      password: password,
    );

      if (authCredential.user != null) {
        log("USer Created Successfully");
        return authCredential.user!;
      }
    } on FirebaseAuthException catch (e) {
      log(e.message!);
      rethrow;
    } catch (e) {
      log(e.toString());
      rethrow;
    }
    return null;
  }

  Future login(String email, String password) async {
     try {
       final authCredential = await _auth.signInWithEmailAndPassword(
      email: email,
      password: password,
    );

      if (authCredential.user != null) {
        log("USer Loggedin Successfully");
        return authCredential.user!;
      }
    } on FirebaseAuthException catch (e) {
      log(e.message!);
      rethrow;
    } catch (e) {
      log(e.toString());
      rethrow;
    }
  return null;
  }


 Future<void> logout()async{
  try {
   await _auth.signOut();
  } catch (e) {
    log(e.toString());
    rethrow;
  }
  }
}





import 'package:cloud_firestore/cloud_firestore.dart';

class ChatServices {
  final _fire = FirebaseFirestore.instance;

  saveMessage(Map<String, dynamic> message, String chatRoomId) async {
    try {
      await _fire
          .collection("chatRooms")
          .doc(chatRoomId)
          .collection("messages")
          .add(message);
    } catch (e) {
      rethrow;
    }
  }

  updateLastMessage(
    String senderUid,
    String receiverUid,
    String message,
    int timeStamp,
  ) async {
    try {
      // Update sender's data - no unread counter increment for own messages
      await _fire.collection("users").doc(senderUid).update({
        'lastMessage': {
          "content": message,
          "timeStamp": timeStamp,
          "senderId": senderUid,
        },
      });

      // Update receiver's data - increment unread counter
      await _fire.collection("users").doc(receiverUid).update({
        'lastMessage': {
          "content": message,
          "timeStamp": timeStamp,
          "senderId": senderUid,
        },
        "unreadCounter": FieldValue.increment(1)
      });
    } catch (e) {
      rethrow;
    }
  }

  // Reset unread counter when opening a chat
  Future<void> resetUnreadCounter(String currentUserUid) async {
    try {
      await _fire.collection("users").doc(currentUserUid).update({
        "unreadCounter": 0
      });
    } catch (e) {
      rethrow;
    }
  }

  Stream<QuerySnapshot<Map<String, dynamic>>> getMessages(String chatRoomId) {
    return _fire
        .collection("chatRooms")
        .doc(chatRoomId)
        .collection("messages")
        .orderBy("timeStamp", descending: false)
        .snapshots();
  }
}


import 'dart:developer';

import 'package:cloud_firestore/cloud_firestore.dart';

class DatabaseServices {
  final _fire = FirebaseFirestore.instance;

  Future<void> saveUser(Map<String, dynamic> userData) async {
    try {
      await _fire.collection("users").doc(userData['uid']).set(userData);

      log("User saved successfully!");
    } catch (e) {
      rethrow;
    }
  }

  Future<Map<String, dynamic>?> loadUser(String uid) async {
    try {
      final res = await _fire.collection("users").doc(uid).get();

      if (res.data() != null) {
        log("User fetched successfully!");
        return res.data();
      }
    } catch (e) {
      rethrow;
    }
    return null;
  }

  Future<List<Map<String, dynamic>>?> fetchUsers(String currenUserId) async {
    try {
      final res =
          await _fire
              .collection("users")
              .where("uid", isNotEqualTo: currenUserId)
              .get();

      return res.docs.map((e) => e.data()).toList();
    } catch (e) {
      rethrow;
    }
  }

  Stream<QuerySnapshot<Map<String, dynamic>>> fetchUserStream(
    String currenUserId,
  ) =>
      _fire
          .collection('users')
          .where("uid", isNotEqualTo: currenUserId)
          .snapshots();
}


import 'dart:io';

import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_storage/firebase_storage.dart';

class StorageService {
  final _storage = FirebaseStorage.instance;

  Future<String> uploadImage(File image) async {
    try {
      Reference ref = _storage.ref(
        'images/${DateTime.now().millisecondsSinceEpoch}',
      );

      final task = await ref.putFile(image);

      String downloadUrl = await task.ref.getDownloadURL();

      return downloadUrl;
    } catch (e) {
      rethrow;
    }
  }
}

import 'package:chat/core/constants/string.dart';
import 'package:chat/core/models/user_model.dart';
import 'package:chat/ui/screens/auth/login/login_screen.dart';
import 'package:chat/ui/screens/auth/signup/signup_screen.dart';
import 'package:chat/ui/screens/bottom_navigation/chats_list/chat_room/chat_screen.dart';
import 'package:chat/ui/screens/splashScreen/splash_screen.dart';
import 'package:chat/ui/screens/wrapper/wrapper.dart';
import 'package:flutter/material.dart';

class RouteUtils {
  static Route<dynamic>? onGenerateRoute(RouteSettings settings) {
    final args = settings.arguments;

    switch (settings.name) {
      case splash:
        return MaterialPageRoute(builder: (context) => SplashScreen());

      //auth

      case signup:
        return MaterialPageRoute(builder: (context) => SignupScreen());
      case login:
        return MaterialPageRoute(builder: (context) => LoginScreen());

      //home

     

      case wrapper:
        return MaterialPageRoute(builder: (context) => Wrapper());

        
      case chatRoom:
        return MaterialPageRoute(builder: (context) => ChatScreen(receiver: args as UserModel,));

      default:
        return MaterialPageRoute(
          builder:
              (context) =>
                  Scaffold(body: Center(child: Text("No Route Found"))),
        );
    }
  }
}


import 'dart:developer';

import 'package:chat/core/constants/colors.dart';
import 'package:chat/core/constants/string.dart';
import 'package:chat/core/constants/style.dart';
import 'package:chat/core/enums/enums.dart';
import 'package:chat/core/extension/extension_widgets.dart';
import 'package:chat/core/services/auth_services.dart';
import 'package:chat/ui/screens/auth/login/loginScreen_viewModel.dart';
import 'package:chat/ui/widgets/button_widgets.dart';
import 'package:chat/ui/widgets/textFieldWidget.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:provider/provider.dart';

class LoginScreen extends StatelessWidget {
  const LoginScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (context) => LoginscreenViewmodel(AuthServices()),
      child: Consumer<LoginscreenViewmodel>(
        builder: (context, model, _) {
          return Scaffold(
            body: Padding(
              padding: EdgeInsets.symmetric(
                horizontal: 1.sw * 0.05,
                vertical: 10.h,
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  50.verticalSpace,
                  Text("Login", style: h),
                  Text(
                    "Please Login to Your Account",
                    style: body.copyWith(color: grey),
                  ),
                  30.verticalSpace,

                  customeTextField(
                    onChanged: model.setEmail,
                    hintText: "Email",
                  ),
                  20.verticalSpace,

                  customeTextField(onChanged: model.setPassword, hintText: "Password"),
                  20.verticalSpace,

                  customButton( 
                    loading: model.state == ViewState.loading,
                    onPressed:model.state == ViewState.loading ? null:  ()async {
                  try {
                     await model.login();
                     context.showSnackbar("User logged in successfully!");
                     
                  }on FirebaseAuthException catch(e){
                     context.showSnackbar(e.toString());
                  } 
                  
                  catch (e) {
                    context.showSnackbar(e.toString());
                  }
                    log("Pressed");
                  },text: "Login",),
                  20.verticalSpace,

                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        "Don't have an account? ",
                        style: body.copyWith(color: grey),
                      ),
                      InkWell(
                        onTap: () {
                          Navigator.pushNamed(context, signup);
                        },

                        child: Text(
                          "SignUp",
                          style: body.copyWith(fontWeight: FontWeight.w700),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}



import 'dart:developer';

import 'package:chat/core/enums/enums.dart';
import 'package:chat/core/others/base_viewModel.dart';
import 'package:chat/core/services/auth_services.dart';
import 'package:firebase_auth/firebase_auth.dart';

class LoginscreenViewmodel extends BaseViewmodel{
  final AuthServices _auth;

  LoginscreenViewmodel(this._auth);
  
  String _email = "";
  String _password = "";

 void setEmail(String value){
    _email=value;
    notifyListeners();

    log("email: $_email");
  }

  
  setPassword(String value){
    _password=value;
    notifyListeners();

    log("Password: $_password");
  }
   
  login()async{
    setstate(ViewState.loading);
    try {
     await _auth.login(_email, _password);
     setstate(ViewState.idle);
    } 
    on FirebaseAuthException catch(e){
           setstate(ViewState.idle);

      rethrow;
    }
    catch (e) {
      log(e.toString());
           setstate(ViewState.idle);

      rethrow;
    }
  }
}

import 'package:chat/core/constants/colors.dart';
import 'package:chat/core/constants/string.dart';
import 'package:chat/core/constants/style.dart';
import 'package:chat/core/enums/enums.dart';
import 'package:chat/core/extension/extension_widgets.dart';
import 'package:chat/core/services/auth_services.dart';
import 'package:chat/core/services/database_services.dart';
import 'package:chat/core/services/storage_service.dart';
import 'package:chat/ui/screens/auth/signup/signup_viewModel.dart';
import 'package:chat/ui/widgets/button_widgets.dart';
import 'package:chat/ui/widgets/textFieldWidget.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:provider/provider.dart';

class SignupScreen extends StatelessWidget {
  const SignupScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider<SignupViewmodel>(
      create: (context) => SignupViewmodel(AuthServices(), DatabaseServices(),StorageService()),
      child: Consumer<SignupViewmodel>(
        builder: (context, model, _) {
          return Scaffold(
            body: Padding(
              padding: EdgeInsets.symmetric(
                horizontal: 1.sw * 0.05,
                vertical: 10.h,
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  50.verticalSpace,
                  Text("Create Your Account", style: h),
                  Text(
                    "Please Provide the details",
                    style: body.copyWith(color: grey),
                  ),
                  30.verticalSpace,
                    InkWell(onTap: () {
                       model.pickimage();
                    },
                      child:model.image==null? CircleAvatar(
                        child: Icon(Icons.camera_alt),radius: 50.r,
                      ) : CircleAvatar(
                        backgroundImage: FileImage(model.image!),
                      ),
                    ),
                    20.verticalSpace,
                  customeTextField(
                    onChanged: model.setName,
                    hintText: "Username",
                  ),
                  20.verticalSpace,

                  customeTextField(
                    onChanged: model.setEmail,
                    hintText: "Email",
                  ),
                  20.verticalSpace,

                  customeTextField(
                    onChanged: model.setPassword,
                    hintText: "Password",
                    isPassword: true,
                  ),
                  20.verticalSpace,
                  customeTextField(
                    onChanged: model.setConfirmPassword,
                    hintText: "Confirm Password",
                    isPassword: true,
                  ),
                  30.verticalSpace,

                  customButton(
                    loading: model.state == ViewState.loading,
                    onPressed:
                        model.state == ViewState.loading
                            ? null
                            : () async {
                              try {
                                await model.signup();
                                context.showSnackbar(
                                  "User signed up successfully!",
                                );
                                Navigator.pop(context);
                              } on FirebaseAuthException catch (e) {
                                context.showSnackbar(e.toString());
                              } catch (e) {
                                context.showSnackbar(e.toString());
                              }
                            },
                    text: "SignUp",
                  ),
                  20.verticalSpace,

                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        "Already have an account? ",
                        style: body.copyWith(color: grey),
                      ),
                      InkWell(
                        onTap: () {
                          Navigator.pushNamed(context, login);
                        },

                        child: Text(
                          "Login",
                          style: body.copyWith(fontWeight: FontWeight.w700),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}




import 'dart:developer';
import 'dart:io';

import 'package:chat/core/enums/enums.dart';
import 'package:chat/core/models/user_model.dart';
import 'package:chat/core/others/base_viewModel.dart';
import 'package:chat/core/services/auth_services.dart';
import 'package:chat/core/services/database_services.dart';
import 'package:chat/core/services/storage_service.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:image_picker/image_picker.dart';

class SignupViewmodel extends BaseViewmodel {
  final AuthServices _auth;
  final DatabaseServices _db;
  final StorageService _storage;

  SignupViewmodel(this._auth, this._db, this._storage);

  final _picker = ImagePicker();

  String _name = "";
  String _email = "";
  String _password = "";
  String _confirmPassword = "";

  File? _image;

  File? get image => _image;

  pickimage() async {
    try {
      final pic = await _picker.pickImage(source: ImageSource.gallery);

      if (pic != null) {
        _image = File(pic.path);
        notifyListeners();
      }
    } catch (e) {
      log("Error picking image: $e");
    }
  }

  void setName(String value) {
    _name = value.trim();
    notifyListeners();
  }

  void setEmail(String value) {
    _email = value.trim();
    notifyListeners();
  }

  setPassword(String value) {
    _password = value;
    notifyListeners();
  }

  setConfirmPassword(String value) {
    _confirmPassword = value;
    notifyListeners();
  }

  bool _validateInputs() {
    if (_name.isEmpty) {
      throw Exception("Please enter your name");
    }
    
    if (_email.isEmpty) {
      throw Exception("Please enter your email");
    }
    
    if (!_email.contains('@') || !_email.contains('.')) {
      throw Exception("Please enter a valid email");
    }
    
    if (_password.isEmpty) {
      throw Exception("Please enter a password");
    }
    
    if (_password.length < 6) {
      throw Exception("Password must be at least 6 characters");
    }
    
    if (_password != _confirmPassword) {
      throw Exception("Passwords do not match");
    }
    
    return true;
  }

  signup() async {
    setstate(ViewState.loading);
    try {
      _validateInputs();
      
      final res = await _auth.signup(_email, _password);

      if (res != null) {
        String? imageUrl;
        
        // Note: Image upload functionality is not being fixed as per request
        
        UserModel user = UserModel(
          uid: res.uid, 
          name: _name, 
          email: _email,
          imageUrl: imageUrl,
          unreadCounter: 0
        );

        await _db.saveUser(user.toMap());
      }

      setstate(ViewState.idle);
    } on FirebaseAuthException catch (e) {
      setstate(ViewState.idle);
      rethrow;
    } catch (e) {
      setstate(ViewState.idle);
      rethrow;
    }
  }
}

import 'package:chat/core/constants/style.dart';
import 'package:chat/core/extension/extension_widgets.dart';
import 'package:chat/core/models/user_model.dart';
import 'package:chat/core/services/chat_services.dart';
import 'package:chat/ui/screens/bottom_navigation/chats_list/chat_room/chat_viewModel.dart';
import 'package:chat/ui/screens/bottom_navigation/chats_list/chat_room/chat_widgets.dart';
import 'package:chat/ui/screens/other/user_provider.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:provider/provider.dart';

class ChatScreen extends StatelessWidget {
  const ChatScreen({super.key, required this.receiver});
  final UserModel receiver;

  @override
  Widget build(BuildContext context) {
    final currentUser = Provider.of<UserProvider>(context).user;

    return ChangeNotifierProvider(
      create:
          (context) => ChatViewmodel(ChatServices(), currentUser!, receiver),
      child: Consumer<ChatViewmodel>(
        builder: (context, model, _) {
          return Scaffold(
            body: Column(
              children: [
                Expanded(
                  child: Padding(
                    padding: EdgeInsets.symmetric(
                      horizontal: 1.sw * 0.05,
                      vertical: 10.h,
                    ),
                    child: Column(
                      children: [
                        17.verticalSpace,
                        _buildHeader(context, name: receiver.name!),
                        15.verticalSpace,
                        Expanded(
                          child: ListView.separated(
                            padding: EdgeInsets.all(0),
                            itemBuilder: (context, index) {
                              final message = model.messages[index];
                              return ChatBubble(
                                isCurrentUser:
                                    message.senderId == currentUser!.uid,
                                message: message,
                              );
                            },
                            separatorBuilder:
                                (context, index) => 10.verticalSpace,
                            itemCount: model.messages.length,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                SizedBox(
                  height: 105,
                  child: BottomField(
                    controller: model.controller,
                    onTap: () async{
                      try {
                         await model.saveMessage();
                      } catch (e) {
                        context.showSnackbar(e.toString());
                        
                      }
                    
                    },
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Row _buildHeader(BuildContext context, {String name = ""}) {
    return Row(
      children: [
        Padding(
          padding: const EdgeInsets.only(top: 6, left: 0, bottom: 6),
          child: Padding(
            padding: const EdgeInsets.only(right: 10),
            child: IconButton(
              onPressed: () {
                Navigator.pop(context);
              },
              icon: Icon(Icons.arrow_back_ios),
            ),
          ),
        ),
        15.horizontalSpace,
        Text(name, style: h.copyWith(fontSize: 23.sp)),
        Spacer(),

        Icon(Icons.more_vert),
      ],
    );
  }
}



import 'dart:async';

import 'package:chat/core/models/message_model.dart';
import 'package:chat/core/models/user_model.dart';
import 'package:chat/core/others/base_viewModel.dart';
import 'package:chat/core/services/chat_services.dart';
import 'package:flutter/material.dart';

class ChatViewmodel extends BaseViewmodel {
  final ChatServices _chatServices;
  final UserModel _currentUser;
  final UserModel _receiver;

  StreamSubscription? _subscription;
  ChatViewmodel(this._chatServices, this._currentUser, this._receiver) {
    getChatRoom();
    
    // Reset unread counter when opening chat
    _chatServices.resetUnreadCounter(_currentUser.uid!);

    _subscription = _chatServices.getMessages(chatRoomId).listen((messages) {
      _messages = messages.docs.map((e) => MessageModel.fromMap(e.data())).toList();
      notifyListeners();
    });
  }

  String chatRoomId = "";

  final _messageController = TextEditingController();

  TextEditingController get controller => _messageController;

  List<MessageModel> _messages = [];

  List<MessageModel> get messages => _messages;

  getChatRoom() {
    if (_currentUser.uid.hashCode > _receiver.uid.hashCode) {
      chatRoomId = "${_currentUser.uid}_${_receiver.uid}";
    } else {
      chatRoomId = "${_receiver.uid}_${_currentUser.uid}";
    }
  }

  saveMessage() async {
    if (_messageController.text.trim().isEmpty) {
      throw Exception("Message cannot be empty");
    }
    
    try {
      final now = DateTime.now();

      final message = MessageModel(
        id: now.millisecondsSinceEpoch.toString(),
        content: _messageController.text.trim(),
        senderId: _currentUser.uid,
        receiverId: _receiver.uid,
        timeStamp: now,
      );
      
      await _chatServices.saveMessage(message.toMap(), chatRoomId);

      await _chatServices.updateLastMessage(
        _currentUser.uid!,
        _receiver.uid!,
        message.content!,
        now.millisecondsSinceEpoch,
      );

      _messageController.clear();
    } catch (e) {
      rethrow;
    }
  }

  @override
  void dispose() {
    super.dispose();
    _subscription?.cancel();
    _messageController.dispose();
  }
}



import 'package:chat/core/constants/colors.dart';
import 'package:chat/core/constants/style.dart';
import 'package:chat/core/models/message_model.dart';
import 'package:chat/ui/widgets/textFieldWidget.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:intl/intl.dart';



class BottomField extends StatelessWidget {
  const BottomField({
    super.key, 
    this.onTap, 
    this.onChanged, 
    this.controller
  });

  final void Function()? onTap;
  final void Function(String)? onChanged;
  final TextEditingController? controller;

  @override
  Widget build(BuildContext context) {
    return Container(
      color: grey.withOpacity(0.2),
      padding: EdgeInsets.symmetric(horizontal: 1.sw * 0.03, vertical: 20.h),
      child: Row(
        children: [
          InkWell(
            onTap: null, // Future functionality
            child: CircleAvatar(
              child: Icon(Icons.add, size: 35),
              backgroundColor: whiteClr,
            ),
          ),
          10.horizontalSpace,
          Expanded(
            child: customeTextField(
              controller: controller,
              isChatText: true,
              hintText: "Type a message",
              onChanged: onChanged,
            ),
          ),
          5.horizontalSpace,
          InkWell(
            onTap: () {
              if (controller != null && 
                  controller!.text.trim().isNotEmpty && 
                  onTap != null) {
                onTap!();
              }
            },
            child: CircleAvatar(
              radius: 25,
              backgroundColor: primary,
              child: Icon(Icons.send_rounded, color: whiteClr),
            ),
          ),
        ],
      ),
    );
  }
}




// 1. Fix for ChatBubble layout constraints issue
class ChatBubble extends StatelessWidget {
  const ChatBubble({
    super.key,
    this.isCurrentUser = true,
    required this.message,
  });

  final bool isCurrentUser;
  final MessageModel message;

  @override
  Widget build(BuildContext context) {
    final borderRadius = isCurrentUser
        ? BorderRadius.only(
            topLeft: Radius.circular(15.r),
            topRight: Radius.circular(15.r),
            bottomLeft: Radius.circular(15.r),
          )
        : BorderRadius.only(
            bottomRight: Radius.circular(15.r),
            topRight: Radius.circular(15.r),
            bottomLeft: Radius.circular(15.r),
          );

    final alignment = isCurrentUser ? Alignment.centerRight : Alignment.centerLeft;

    return Align(
      alignment: alignment,
      child: Container(
        // Fixed constraints - using maxWidth correctly and removing fixed width
        constraints: BoxConstraints(maxWidth: 0.75 * MediaQuery.of(context).size.width),
        padding: EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: isCurrentUser ? primary : grey,
          borderRadius: borderRadius,
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              message.content ?? "",
              style: body.copyWith(color: isCurrentUser ? whiteClr : null),
            ),
            SizedBox(height: 8),
            Align(
              alignment: Alignment.bottomRight,
              child: Text(
                formatMessageTime(message.timeStamp!),
                style: small.copyWith(color: isCurrentUser ? whiteClr : null),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Improved time formatting
  String formatMessageTime(DateTime time) {
    final now = DateTime.now();
    final difference = now.difference(time);
    
    if (difference.inDays > 0) {
      return DateFormat('MMM d, h:mm a').format(time);
    } else if (difference.inHours > 0) {
      return '${difference.inHours}h ago';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes}m ago';
    } else {
      return 'Just now';
    }
  }
}




import 'dart:developer';

import 'package:chat/core/enums/enums.dart';
import 'package:chat/core/models/user_model.dart';
import 'package:chat/core/others/base_viewModel.dart';
import 'package:chat/core/services/database_services.dart';

class ChatListViewmodel extends BaseViewmodel {
  final DatabaseServices _db;
  final UserModel _currentUser;

  ChatListViewmodel(this._db, this._currentUser) {
    fetchUsers();
  }

  List<UserModel> _users = [];
  List<UserModel> _filteredUsers = [];

  List<UserModel> get users => _users;
  List<UserModel> get filteredUsers => _filteredUsers;

  search(String value) {
    if (value.isEmpty) {
      _filteredUsers = _users;
    } else {
      _filteredUsers = _users
          .where((e) => 
              e.name != null && 
              e.name!.toLowerCase().contains(value.toLowerCase()))
          .toList();
    }
    notifyListeners();
  }

  fetchUsers() async {
    try {
      setstate(ViewState.loading);
      _db.fetchUserStream(_currentUser.uid!).listen((data) {
        _users = data.docs.map((e) => UserModel.fromMap(e.data())).toList();
        
        // Sort users by last message timestamp if available
        _users.sort((a, b) {
          if (a.lastMessage == null && b.lastMessage == null) return 0;
          if (a.lastMessage == null) return 1;
          if (b.lastMessage == null) return -1;
          
          final aTime = a.lastMessage!["timeStamp"] as int;
          final bTime = b.lastMessage!["timeStamp"] as int;
          return bTime.compareTo(aTime); // Descending order (newest first)
        });
        
        _filteredUsers = _users;
        notifyListeners();
      });

      setstate(ViewState.idle);
    } catch (e) {
      setstate(ViewState.idle);
      log("Error Fetching Users: $e");
    }
  }
}

import 'package:chat/core/constants/colors.dart';
import 'package:chat/core/constants/string.dart';
import 'package:chat/core/constants/style.dart';
import 'package:chat/core/enums/enums.dart';
import 'package:chat/core/models/user_model.dart';
import 'package:chat/core/services/database_services.dart';
import 'package:chat/ui/screens/bottom_navigation/chats_list/chat_list_viewmodel.dart';
import 'package:chat/ui/screens/other/user_provider.dart';
import 'package:chat/ui/widgets/textFieldWidget.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:intl/intl.dart';
import 'package:provider/provider.dart';

class ChatsListscreen extends StatelessWidget {
  const ChatsListscreen({super.key});

  @override
  Widget build(BuildContext context) {
    final currentUser = Provider.of<UserProvider>(context).user;

    return ChangeNotifierProvider(
      create: (context) => ChatListViewmodel(DatabaseServices(), currentUser!),
      child: Consumer<ChatListViewmodel>(
        builder: (context, model, _) {
          return Padding(
            padding: EdgeInsets.symmetric(
              horizontal: 1.sw * 0.05,
              vertical: 10.h,
            ),
            child: Column(
              children: [
                20.verticalSpace,
                Align(
                  alignment: Alignment.centerLeft,
                  child: Text("Chats", style: h),
                ),
                20.verticalSpace,
                customeTextField(
                  isSearch: true,
                  hintText: "Search",
                  onChanged: model.search,
                ),
                10.verticalSpace,
                model.state == ViewState.loading
                    ? Expanded(
                      child: Center(child: CircularProgressIndicator()),
                    )
                    : model.users.isEmpty
                    ? Expanded(child: Center(child: Text("No Users found")))
                    : model.filteredUsers.isEmpty
                    ? Expanded(child: Center(child: Text("No results found")))
                    : Expanded(
                      child: ListView.separated(
                        padding: EdgeInsets.symmetric(
                          vertical: 5,
                          horizontal: 0,
                        ),
                        itemCount: model.filteredUsers.length,
                        separatorBuilder: (context, index) => 5.verticalSpace,
                        itemBuilder: (context, index) {
                          final user = model.filteredUsers[index];
                          return ChatTile(
                            user: user,
                            onTap:
                                () => Navigator.pushNamed(
                                  context,
                                  chatRoom,
                                  arguments: user,
                                ),
                          );
                        },
                      ),
                    ),
              ],
            ),
          );
        },
      ),
    );
  }
}




class ChatTile extends StatelessWidget {
  const ChatTile({
    super.key, 
    this.onTap, 
    required this.user
  });

  final UserModel user;
  final void Function()? onTap;

  @override
  Widget build(BuildContext context) {
    final hasUnread = user.unreadCounter != null && user.unreadCounter! > 0;
    
    return ListTile(
      onTap: onTap,
      trailing: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          Text(
            user.lastMessage == null ? "" : getTimeString(),
            style: TextStyle(color: const Color.fromARGB(255, 96, 97, 103)),
          ),
          10.verticalSpace,
          if (hasUnread)
            CircleAvatar(
              radius: 10.r,
              child: Text(
                "${user.unreadCounter}", 
                style: small.copyWith(color: whiteClr),
              ),
              backgroundColor: primary,
            ),
        ],
      ),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20.r)),
      tileColor: grey.withOpacity(0.12),
      title: Text(user.name ?? ""),
      subtitle: Text(
        user.lastMessage != null ? user.lastMessage!['content'] ?? "" : "",
        overflow: TextOverflow.ellipsis,
        maxLines: 1,
      ),
      contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 5),
      leading: CircleAvatar(
        backgroundColor: grey.withOpacity(0.5),
        radius: 30,
        child: Text(user.name != null && user.name!.isNotEmpty ? user.name![0] : "", style: h),
      ),
    );
  }

  String getTimeString() {
    if (user.lastMessage == null) return "";
    
    final timestamp = user.lastMessage!["timeStamp"] as int;
    final messageTime = DateTime.fromMillisecondsSinceEpoch(timestamp);
    final now = DateTime.now();
    final difference = now.difference(messageTime);
    
    if (difference.inDays > 6) {
      return DateFormat('MMM d').format(messageTime);
    } else if (difference.inDays > 0) {
      return DateFormat('E').format(messageTime); // Day name
    } else if (difference.inHours > 0) {
      return '${difference.inHours}h ago';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes}m ago';
    } else {
      return 'Just now';
    }
  }
}




import 'package:chat/core/constants/colors.dart';
import 'package:chat/core/constants/style.dart';
import 'package:chat/core/services/auth_services.dart';
import 'package:chat/ui/screens/other/user_provider.dart';
import 'package:chat/ui/widgets/button_widgets.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:provider/provider.dart';

class ProfileScreen extends StatelessWidget {
  const ProfileScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final userProvider = Provider.of<UserProvider>(context);
    final user = userProvider.user;
    
    return Scaffold(
      body: Padding(
        padding: EdgeInsets.symmetric(horizontal: 1.sw * 0.05),
        child: user == null 
            ? Center(child: CircularProgressIndicator())
            : Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  50.verticalSpace,
                  Text("Profile", style: h),
                  30.verticalSpace,
                  CircleAvatar(
                    radius: 50.r,
                    backgroundColor: grey.withOpacity(0.5),
                    child: user.imageUrl != null 
                        ? ClipRRect(
                            borderRadius: BorderRadius.circular(50.r),
                            child: Image.network(
                              user.imageUrl!,
                              width: 100.r,
                              height: 100.r,
                              fit: BoxFit.cover,
                              errorBuilder: (context, error, stackTrace) => 
                                  Text(user.name?[0] ?? "", style: h),
                            ),
                          )
                        : Text(user.name?[0] ?? "", style: h),
                  ),
                  20.verticalSpace,
                  ListTile(
                    title: Text("Name"),
                    subtitle: Text(user.name ?? ""),
                    leading: Icon(Icons.person),
                  ),
                  ListTile(
                    title: Text("Email"),
                    subtitle: Text(user.email ?? ""),
                    leading: Icon(Icons.email),
                  ),
                  30.verticalSpace,
                  customButton(
                    text: "LogOut",
                    onPressed: () {
                      AuthServices().logout();
                      Provider.of<UserProvider>(context, listen: false).clearUser();
                    },
                  ),
                ],
              ),
      ),
    );
  }
}





import 'package:chat/core/others/base_viewModel.dart';

class BottomNavigationViewmodel extends BaseViewmodel {
  int _currentIndex = 1;

  int get currentIndex => _currentIndex;

  void setIndex(int value) {
    if (value >= 0 && value < 3 && _currentIndex != value) {
      _currentIndex = value;
      notifyListeners();
    }
  }
}


import 'package:chat/core/constants/string.dart';
import 'package:chat/ui/screens/bottom_navigation/bottom_nav_viewmodel.dart';
import 'package:chat/ui/screens/bottom_navigation/chats_list/chats_listScreen.dart';
import 'package:chat/ui/screens/bottom_navigation/profile/Profile_screen.dart';
import 'package:chat/ui/screens/other/user_provider.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class BottomNavigationScreen extends StatelessWidget {
  const BottomNavigationScreen({super.key});

  static final List<Widget> _screens = [
    const Center(child: Text("Home")),
    const ChatsListscreen(), // 
    ProfileScreen(),
  ];

  @override
  Widget build(BuildContext context) {
    final currentUser=Provider.of<UserProvider>(context).user;
    return ChangeNotifierProvider(
      create: (context) => BottomNavigationViewmodel(),
      child: Consumer<BottomNavigationViewmodel>(
        builder: (context, model, _) {
          return currentUser == null
        ? Center(child: CircularProgressIndicator())
        :  Scaffold(
            body: _screens[model.currentIndex],
            bottomNavigationBar: CustomBottomNavBar(),
          );
        },
      ),
    );
  }
}

class CustomBottomNavBar extends StatelessWidget {
  const CustomBottomNavBar({super.key});

  @override
  Widget build(BuildContext context) {
    final viewModel = Provider.of<BottomNavigationViewmodel>(context);
    return Container(
      decoration: BoxDecoration(
        borderRadius: const BorderRadius.only(
          topRight: Radius.circular(30),
          topLeft: Radius.circular(30),
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.2),
            spreadRadius: 0,
            blurRadius: 10,
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(30),
          topRight: Radius.circular(30),
        ),
        child: SizedBox(
          height: MediaQuery.of(context).size.height * 0.1, 
          child: BottomNavigationBar(
            currentIndex: viewModel.currentIndex,
            onTap: (index) {
              viewModel.setIndex(index);
            },
            showSelectedLabels: false, 
            showUnselectedLabels: false,
            items: [
              BottomNavigationBarItem(
                label: "Calls", // For accessibility
                icon: Image.asset(callIcon, height: 35),
              ),
              BottomNavigationBarItem(
                label: "Chats",
                icon: Image.asset(chatsIcon, height: 35),
              ),
              BottomNavigationBarItem(
                label: "Profile",
                icon: Image.asset(profileIcon, height: 35),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


import 'package:chat/core/models/user_model.dart';
import 'package:chat/core/services/database_services.dart';
import 'package:flutter/material.dart';

class UserProvider extends ChangeNotifier {
  final DatabaseServices _db;

  UserProvider(this._db);

  UserModel? _currentUser;

  UserModel? get user => _currentUser;

  loadUser(String uid) async {
    final userData = await _db.loadUser(uid);

    if (userData != null) {
      _currentUser = UserModel.fromMap(userData);
      notifyListeners();
    }
  }

  clearUser() {
    _currentUser = null;
    notifyListeners();
  }
}

import 'dart:async';

import 'package:chat/core/constants/string.dart';
import 'package:flutter/material.dart';

class SplashScreen extends StatefulWidget {
   SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  Timer? _timer;

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    _timer=Timer(Duration(seconds: 3), (){
      Navigator.pushNamed(context, wrapper);
    });
  }

  @override
  void dispose() {
    // TODO: implement dispose
    super.dispose();
    _timer?.cancel();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Image.asset(logo,height: 350,width: 350,),
      ),
    );
  }
}


import 'package:chat/ui/screens/auth/login/login_screen.dart';
import 'package:chat/ui/screens/bottom_navigation/bottom_navigation.dart';
import 'package:chat/ui/screens/other/user_provider.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class Wrapper extends StatelessWidget {
  const Wrapper({super.key});


  @override
  Widget build(BuildContext context) {
      final userProvider = Provider.of<UserProvider>(context,listen: false);

    return StreamBuilder(stream: FirebaseAuth.instance.authStateChanges(), builder: (context, snapshot) {
      final user=snapshot.data;

      if(snapshot.connectionState == ConnectionState.waiting){
        return Center(child: CircularProgressIndicator());
      }

      if(snapshot.hasError){
        return Center(child: Text("Something went wrong!"));
      }

      if(user==null){
        return LoginScreen();
      }else{

        userProvider.loadUser(user.uid);
        return BottomNavigationScreen();
      }
    },);
  }
}


import 'package:chat/core/constants/colors.dart';
import 'package:chat/core/constants/style.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

class customButton extends StatelessWidget {
  const customButton({
    super.key,this.onPressed,required this.text,this.loading=false
  });

  final void Function()? onPressed;
  final String text;
  final bool loading;

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: 250,
      height: 50.h,
      child: ElevatedButton(
        style: ElevatedButton.styleFrom(backgroundColor: primary),
        onPressed: onPressed,
        child:loading?Center(child: CircularProgressIndicator()): Text(text, style: body.copyWith(color: whiteClr)),
      ),
    );
  }
}



import 'package:chat/core/constants/colors.dart';
import 'package:chat/core/constants/string.dart';
import 'package:chat/core/constants/style.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

class customeTextField extends StatelessWidget {
  customeTextField({
    super.key,
    this.hintText,
    this.focusNode,
    this.controller,
    this.onChanged,
    this.onTap,
    this.isPassword = false,
    this.isSearch = false,
    this.isChatText = false,
  });

  final void Function(String)? onChanged;
  final String? hintText;
  final FocusNode? focusNode;
  final bool isSearch;
  final bool isChatText;
  final TextEditingController? controller;
  final void Function()? onTap;
  final bool isPassword;

  @override
  Widget build(BuildContext context) {
    return TextField(
      controller: controller,
      onChanged: onChanged,
      focusNode: focusNode,
      obscureText: isPassword,
      textCapitalization: isChatText ? TextCapitalization.sentences : TextCapitalization.none,
      keyboardType: isChatText ? TextInputType.multiline : TextInputType.text,
      textInputAction: isChatText ? TextInputAction.newline : TextInputAction.done,
      maxLines: isChatText ? 3 : 1, // Allow multiple lines for chat
      minLines: 1,
      decoration: InputDecoration(
        contentPadding: 
            isChatText ? EdgeInsets.symmetric(horizontal: 12.w, vertical: 8.h) : null,
        hintText: hintText,
        hintStyle: body.copyWith(color: grey),
        suffixIcon: isSearch
            ? Container(
                height: 20,
                width: 10,
                child: Image.asset(searchIcon, height: 10),
              )
            : null,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(isChatText ? 20.r : 5.r),
          borderSide: BorderSide(
            color: grey.withOpacity(0.3),
            width: 1.0,
          ),
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(isChatText ? 20.r : 5.r),
          borderSide: BorderSide(
            color: grey.withOpacity(0.3),
            width: 1.0,
          ),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(isChatText ? 20.r : 5.r),
          borderSide: BorderSide(
            color: primary.withOpacity(0.5),
            width: 1.5,
          ),
        ),
        fillColor: isChatText ? whiteClr : grey.withOpacity(0.02),
        filled: true,
      ),
    );
  }
}


import 'package:chat/core/services/database_services.dart';
import 'package:chat/core/utils/route_utils.dart';
import 'package:chat/firebase_options.dart';
import 'package:chat/ui/screens/other/user_provider.dart';
import 'package:chat/ui/screens/splashScreen/splash_screen.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';
import 'package:provider/provider.dart';

void main() async {
  runApp(MyApp());

  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return ScreenUtilInit(
      builder:
          (context, child) => ChangeNotifierProvider(
            create: (context) => UserProvider(DatabaseServices()),
            child: GetMaterialApp(
              onGenerateRoute: RouteUtils.onGenerateRoute,
              home: SplashScreen(),
              debugShowCheckedModeBanner: false,
            ),
          ),
    );
  }
}


fix the bugs,mistakes in code,issues in code,errors in code, and enhance the UI attractive with like of real app with efficient color combo's 